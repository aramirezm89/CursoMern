{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Antonio\\\\OneDrive\\\\CursoMERN\\\\ProyectoCurso\\\\client\\\\src\\\\components\\\\Admin\\\\Courses\\\\CoursesList\\\\CoursesList.js\";\nimport React, { useState, useEffect } from 'react';\nimport { List, Button, Modal as ModalAntd, notification } from \"antd\";\nimport { EditOutlined, DeleteOutlined } from \"@ant-design/icons\";\nimport DragSortableList from \"react-drag-sortable\";\nimport Modal from \"../../../../Modal\";\nimport { getCourseDataUdemyApi, deleteCourseApi, updateCourseApi } from \"../../../../api/course\";\nimport { getAccessTokenApi } from \"../../../../api/auth\";\nimport AddEditCourseForm from \"../AddEditCourseForm\";\nimport \"./CoursesList.scss\";\nconst {\n  confirm\n} = ModalAntd;\nexport default function CoursesList(props) {\n  const {\n    courses,\n    setReloadCourses\n  } = props;\n  const [listCourses, setListCourses] = useState([]);\n  const [isVisibleModal, setIsVisibleModal] = useState(false);\n  const [modalTitle, setModalTitle] = useState(\"\");\n  const [modalContent, setModalContent] = useState(null);\n  useEffect(() => {\n    const listCoursesArray = [];\n    courses.forEach(courses => {\n      listCoursesArray.push({\n        content: /*#__PURE__*/React.createElement(Course, {\n          courses: courses,\n          deleteCourse: deleteCourse,\n          editCourseModal: editCourseModal,\n          dropBackTransitionDuration: 0.9,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 27,\n            columnNumber: 21\n          }\n        })\n      });\n    });\n    setListCourses(listCoursesArray);\n  }, [courses]);\n\n  const onSort = (sortedList, dropEvent) => {\n    const accesToken = getAccessTokenApi();\n    sortedList.forEach(item => {\n      const {\n        _id\n      } = item.content.props.courses;\n      const order = item.rank;\n      updateCourseApi(accesToken, _id, {\n        order\n      });\n    });\n  };\n\n  const deleteCourse = courses => {\n    const accesToken = getAccessTokenApi();\n    confirm({\n      title: \"Eliminando Curso\",\n      content: `Estas seguro que quieres eliminar el curso ${courses.idCourse}`,\n      okText: \"Eliminar\",\n      okType: \"danger\",\n      cancelText: \"Cancelar\",\n\n      onOk() {\n        deleteCourseApi(accesToken, courses._id).then(response => {\n          const typeNotification = response.code === 200 ? \"success\" : \"warning\";\n          notification[typeNotification]({\n            message: response.message\n          });\n          setReloadCourses(true);\n        }).catch(() => {\n          notification[\"error\"]({\n            message: \"Error del servidor, intentalo mÃ¡s tarde.\"\n          });\n        });\n      }\n\n    });\n  };\n\n  const addCourseModal = () => {\n    setIsVisibleModal(true);\n    setModalTitle(\"Creando nuevo curso.\");\n    setModalContent( /*#__PURE__*/React.createElement(AddEditCourseForm, {\n      setIsVisibleModal: setIsVisibleModal,\n      setReloadCourses: setReloadCourses,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 13\n      }\n    }));\n  };\n\n  const editCourseModal = courses => {\n    setIsVisibleModal(true);\n    setModalTitle(\"Actualizando curso.\");\n    setModalContent( /*#__PURE__*/React.createElement(AddEditCourseForm, {\n      setIsVisibleModal: setIsVisibleModal,\n      setReloadCourses: setReloadCourses,\n      courses: courses,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 13\n      }\n    }));\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"courses-list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"courses-list-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    type: \"primary\",\n    onClick: addCourseModal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 17\n    }\n  }, \"Nuevo curso\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"courses-list-items\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }\n  }, listCourses.length === 0 && /*#__PURE__*/React.createElement(\"h2\", {\n    style: {\n      textAlign: \"center\",\n      margin: 0\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 21\n    }\n  }, \"No tines cursos creados.\"), /*#__PURE__*/React.createElement(DragSortableList, {\n    items: listCourses,\n    onSort: onSort,\n    type: \"vertical\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Modal, {\n    title: modalTitle,\n    isVisible: isVisibleModal,\n    setIsVisible: setIsVisibleModal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 17\n    }\n  }, modalContent)));\n}\n\nfunction Course(props) {\n  const {\n    courses,\n    deleteCourse,\n    editCourseModal\n  } = props;\n  const [courseData, setCourseData] = useState(null);\n  useEffect(() => {\n    getCourseDataUdemyApi(courses.idCourse).then(response => {\n      if (response.code !== 200) {\n        notification[\"warning\"]({\n          message: `EL curso con el id ${courses.idCourse} no se ha encontrado.`\n        });\n      }\n\n      setCourseData(response.data);\n    });\n  }, [courses]);\n\n  if (!courseData) {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(List.Item, {\n    actions: [/*#__PURE__*/React.createElement(Button, {\n      type: \"primary\",\n      onClick: () => editCourseModal(courses),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(EditOutlined, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 15\n      }\n    })), /*#__PURE__*/React.createElement(Button, {\n      type: \"danger\",\n      onClick: () => deleteCourse(courses),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(DeleteOutlined, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 16\n      }\n    }))],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: courseData.image_480x270,\n    alt: courseData.title,\n    style: {\n      width: \"100px\",\n      marginRight: \"20px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(List.Item.Meta, {\n    title: `${courseData.title} | ID:${courses.idCourse}`,\n    description: courseData.headline,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 11\n    }\n  }));\n}","map":{"version":3,"sources":["C:/Users/Antonio/OneDrive/CursoMERN/ProyectoCurso/client/src/components/Admin/Courses/CoursesList/CoursesList.js"],"names":["React","useState","useEffect","List","Button","Modal","ModalAntd","notification","EditOutlined","DeleteOutlined","DragSortableList","getCourseDataUdemyApi","deleteCourseApi","updateCourseApi","getAccessTokenApi","AddEditCourseForm","confirm","CoursesList","props","courses","setReloadCourses","listCourses","setListCourses","isVisibleModal","setIsVisibleModal","modalTitle","setModalTitle","modalContent","setModalContent","listCoursesArray","forEach","push","content","deleteCourse","editCourseModal","onSort","sortedList","dropEvent","accesToken","item","_id","order","rank","title","idCourse","okText","okType","cancelText","onOk","then","response","typeNotification","code","message","catch","addCourseModal","length","textAlign","margin","Course","courseData","setCourseData","data","image_480x270","width","marginRight","headline"],"mappings":"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","sourcesContent":["import React,{useState,useEffect} from 'react';\r\nimport {List,Button,Modal as ModalAntd,notification} from \"antd\";\r\nimport {EditOutlined,DeleteOutlined} from \"@ant-design/icons\"\r\nimport DragSortableList from \"react-drag-sortable\";\r\nimport Modal from \"../../../../Modal\";\r\nimport {getCourseDataUdemyApi,deleteCourseApi, updateCourseApi} from \"../../../../api/course\"\r\nimport {getAccessTokenApi} from \"../../../../api/auth\";\r\nimport AddEditCourseForm from \"../AddEditCourseForm\"\r\n\r\nimport \"./CoursesList.scss\";\r\n\r\nconst {confirm} = ModalAntd;\r\n\r\nexport default function CoursesList(props) {\r\n    const {courses,setReloadCourses} = props;\r\n    const [listCourses, setListCourses] = useState([]);\r\n    const [isVisibleModal, setIsVisibleModal] = useState(false);\r\n    const [modalTitle, setModalTitle] = useState(\"\");\r\n    const [modalContent, setModalContent] = useState(null);\r\n   \r\n    \r\n    useEffect(() => {\r\n        const listCoursesArray = [];\r\n        courses.forEach(courses =>{\r\n            listCoursesArray.push({\r\n                content:(\r\n                    <Course courses={courses} deleteCourse={deleteCourse} editCourseModal={editCourseModal} dropBackTransitionDuration={0.9}/>\r\n                )\r\n            });\r\n            \r\n        })\r\n        setListCourses(listCoursesArray);\r\n    }, [courses]);\r\n\r\n    \r\n    const onSort= (sortedList, dropEvent) =>{\r\n        const accesToken = getAccessTokenApi();\r\n        \r\n        sortedList.forEach(item =>{\r\n            const {_id} = item.content.props.courses;\r\n            const order = item.rank;\r\n            updateCourseApi(accesToken,_id,{order})\r\n            \r\n\r\n        })\r\n    }\r\n\r\n    const deleteCourse = courses =>{\r\n        \r\n        const accesToken = getAccessTokenApi();\r\n\r\n        confirm({\r\n            title:\"Eliminando Curso\",\r\n            content:`Estas seguro que quieres eliminar el curso ${courses.idCourse}`,\r\n            okText: \"Eliminar\",\r\n            okType:\"danger\",\r\n            cancelText:\"Cancelar\",\r\n            onOk(){\r\n                deleteCourseApi(accesToken,courses._id).then(response =>{\r\n                    const typeNotification = response.code === 200 ? \"success\" : \"warning\";\r\n                    notification[typeNotification]({\r\n                        message:response.message,\r\n                    });\r\n                    setReloadCourses(true);\r\n                }).catch(() =>{\r\n                    notification[\"error\"]({\r\n                        message: \"Error del servidor, intentalo mÃ¡s tarde.\"\r\n                    })\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n    const  addCourseModal = () =>{\r\n        setIsVisibleModal(true);\r\n        setModalTitle(\"Creando nuevo curso.\");\r\n        setModalContent(\r\n            <AddEditCourseForm \r\n            setIsVisibleModal={setIsVisibleModal} \r\n            setReloadCourses={setReloadCourses}\r\n            />\r\n        )\r\n    }\r\n\r\n    const  editCourseModal =  courses =>{\r\n        setIsVisibleModal(true);\r\n        setModalTitle(\"Actualizando curso.\");\r\n        setModalContent(\r\n            <AddEditCourseForm \r\n            setIsVisibleModal={setIsVisibleModal} \r\n            setReloadCourses={setReloadCourses}\r\n            courses={courses}\r\n            />\r\n        )\r\n    }\r\n\r\n  \r\n    return (\r\n        <div className=\"courses-list\">\r\n            <div className=\"courses-list-header\">\r\n                <Button \r\n                type=\"primary\" \r\n                onClick={addCourseModal}\r\n                >\r\n                    Nuevo curso\r\n                </Button>\r\n            </div>\r\n\r\n            <div className=\"courses-list-items\">\r\n                {listCourses.length === 0 &&(\r\n                    <h2 style={{ textAlign:\"center\", margin:0}}>\r\n                        No tines cursos creados.\r\n                    </h2>\r\n                )}\r\n\r\n                <DragSortableList items={listCourses} onSort={onSort} type=\"vertical\"/>\r\n\r\n                <Modal\r\n                    title={modalTitle}\r\n                    isVisible = {isVisibleModal}\r\n                    setIsVisible = {setIsVisibleModal}\r\n                >\r\n                    {modalContent}\r\n                </Modal>\r\n            </div>\r\n        </div>\r\n        \r\n        \r\n    )\r\n}\r\n\r\nfunction Course(props){\r\n    const {courses, deleteCourse, editCourseModal} = props;\r\n    const [courseData, setCourseData] = useState(null);\r\n\r\n    useEffect(() => {\r\n      getCourseDataUdemyApi(courses.idCourse).then(response =>{\r\n          if(response.code !==200){\r\n              notification[\"warning\"]({\r\n                  message:`EL curso con el id ${courses.idCourse} no se ha encontrado.`\r\n              })\r\n          }\r\n\r\n          setCourseData(response.data);\r\n      })\r\n    }, [courses])\r\n\r\n    if(!courseData){\r\n        return null;\r\n    }\r\n  return(\r\n      <List.Item\r\n        actions={[\r\n            <Button \r\n             type=\"primary\"\r\n             onClick={() => editCourseModal(courses)}\r\n            >\r\n              <EditOutlined/>\r\n            </Button>,\r\n              <Button \r\n              type=\"danger\"\r\n              onClick={() =>deleteCourse(courses)}\r\n             >\r\n               <DeleteOutlined/>\r\n             </Button>\r\n\r\n        ]}\r\n      >\r\n          <img \r\n          src={courseData.image_480x270} \r\n          alt={courseData.title} \r\n          style={{width:\"100px\", marginRight:\"20px\"}}\r\n          />\r\n          <List.Item.Meta \r\n            title={`${courseData.title} | ID:${courses.idCourse}`}\r\n            description={courseData.headline}\r\n          />\r\n\r\n      </List.Item>\r\n  )\r\n}"]},"metadata":{},"sourceType":"module"}
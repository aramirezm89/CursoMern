{"ast":null,"code":"import { basePath, apiVersion } from \"./config\";\nexport function getCoursesApi() {\n  const url = `${basePath}/${apiVersion}/get-courses`;\n  return fetch(url).then(response => {\n    return response.json();\n  }).then(result => {\n    return result;\n  }).catch(err => {\n    return err;\n  });\n}\nexport function getCourseDataUdemyApi(id) {\n  const baseUrl = `https://www.udemy.com/api-2.0/courses/${id}`;\n  const coursesParams = `?fields[course]=title,headline,url,price,image_480x270`;\n  const url = baseUrl + coursesParams;\n  return fetch(url).then(async response => {\n    return {\n      code: await response.status,\n      data: response.json()\n    };\n  }).then(result => {\n    return result;\n  }).catch(err => {\n    return err;\n  });\n}\nexport function deleteCourseApi(token, id) {\n  const url = `${basePath}/${apiVersion}/delete-course/${id}`;\n  const params = {\n    method: \"DELETE\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: token\n    }\n  };\n  return fetch(url, params).then(reponse => {\n    return reponse.json();\n  }).then(result => {\n    return result;\n  }).catch(err => {\n    return err;\n  });\n}\nexport function addCourseApi(token, course) {\n  const url = `${basePath}/${apiVersion}/add-course`;\n  const params = {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: token\n    },\n    body: JSON.stringify(course)\n  };\n  return fetch(url, params).then(response => {\n    return response.json();\n  }).then(result => {\n    return result;\n  }).catch(err => {\n    return err;\n  });\n}","map":{"version":3,"sources":["C:/Users/Antonio/OneDrive/CursoMERN/ProyectoCurso/client/src/api/course.js"],"names":["basePath","apiVersion","getCoursesApi","url","fetch","then","response","json","result","catch","err","getCourseDataUdemyApi","id","baseUrl","coursesParams","code","status","data","deleteCourseApi","token","params","method","headers","Authorization","reponse","addCourseApi","course","body","JSON","stringify"],"mappings":"AAAA,SAAQA,QAAR,EAAiBC,UAAjB,QAAkC,UAAlC;AAEA,OAAO,SAASC,aAAT,GAAwB;AAC3B,QAAMC,GAAG,GAAI,GAAEH,QAAS,IAAGC,UAAW,cAAtC;AAEA,SAAOG,KAAK,CAACD,GAAD,CAAL,CAAWE,IAAX,CAAgBC,QAAQ,IAAG;AAC9B,WAAOA,QAAQ,CAACC,IAAT,EAAP;AACH,GAFM,EAEJF,IAFI,CAECG,MAAM,IAAG;AACb,WAAOA,MAAP;AACH,GAJM,EAIJC,KAJI,CAIEC,GAAG,IAAG;AACX,WAAOA,GAAP;AACH,GANM,CAAP;AAOH;AAED,OAAO,SAASC,qBAAT,CAA+BC,EAA/B,EAAkC;AACrC,QAAMC,OAAO,GAAE,yCAAwCD,EAAG,EAA1D;AACA,QAAME,aAAa,GAAI,wDAAvB;AACA,QAAMX,GAAG,GAAGU,OAAO,GAAGC,aAAtB;AAEA,SAAOV,KAAK,CAACD,GAAD,CAAL,CAAWE,IAAX,CAAgB,MAAMC,QAAN,IAAiB;AACpC,WAAO;AAACS,MAAAA,IAAI,EAAE,MAAMT,QAAQ,CAACU,MAAtB;AAA8BC,MAAAA,IAAI,EAAGX,QAAQ,CAACC,IAAT;AAArC,KAAP;AACH,GAFM,EAEJF,IAFI,CAEEG,MAAM,IAAG;AACd,WAAOA,MAAP;AACH,GAJM,EAIJC,KAJI,CAIEC,GAAG,IAAG;AACX,WAAOA,GAAP;AACH,GANM,CAAP;AAQH;AAED,OAAO,SAASQ,eAAT,CAAyBC,KAAzB,EAA+BP,EAA/B,EAAkC;AACrC,QAAMT,GAAG,GAAI,GAAEH,QAAS,IAAGC,UAAW,kBAAiBW,EAAG,EAA1D;AAEA,QAAMQ,MAAM,GAAG;AACXC,IAAAA,MAAM,EAAE,QADG;AAEXC,IAAAA,OAAO,EAAC;AACL,sBAAgB,kBADX;AAELC,MAAAA,aAAa,EAAEJ;AAFV;AAFG,GAAf;AAQA,SAAOf,KAAK,CAACD,GAAD,EAAKiB,MAAL,CAAL,CAAkBf,IAAlB,CAAuBmB,OAAO,IAAG;AACpC,WAAOA,OAAO,CAACjB,IAAR,EAAP;AACH,GAFM,EAEJF,IAFI,CAECG,MAAM,IAAG;AACb,WAAOA,MAAP;AACH,GAJM,EAIJC,KAJI,CAIEC,GAAG,IAAG;AACX,WAAOA,GAAP;AACH,GANM,CAAP;AAOH;AAED,OAAO,SAASe,YAAT,CAAuBN,KAAvB,EAA6BO,MAA7B,EAAoC;AACvC,QAAMvB,GAAG,GAAI,GAAEH,QAAS,IAAGC,UAAW,aAAtC;AACC,QAAMmB,MAAM,GAAG;AACXC,IAAAA,MAAM,EAAC,MADI;AAEXC,IAAAA,OAAO,EAAC;AACJ,sBAAgB,kBADZ;AAEJC,MAAAA,aAAa,EAAEJ;AAFX,KAFG;AAMXQ,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeH,MAAf;AANK,GAAf;AASA,SAAOtB,KAAK,CAACD,GAAD,EAAKiB,MAAL,CAAL,CAAkBf,IAAlB,CAAuBC,QAAQ,IAAG;AACtC,WAAOA,QAAQ,CAACC,IAAT,EAAP;AACF,GAFM,EAEJF,IAFI,CAECG,MAAM,IAAG;AACb,WAAOA,MAAP;AACH,GAJM,EAIJC,KAJI,CAIEC,GAAG,IAAE;AACV,WAAOA,GAAP;AACH,GANM,CAAP;AAOJ","sourcesContent":["import {basePath,apiVersion} from \"./config\";\r\n\r\nexport function getCoursesApi(){\r\n    const url = `${basePath}/${apiVersion}/get-courses`;\r\n\r\n    return fetch(url).then(response =>{\r\n        return response.json();\r\n    }).then(result =>{\r\n        return result;\r\n    }).catch(err =>{\r\n        return err\r\n    })\r\n}\r\n\r\nexport function getCourseDataUdemyApi(id){\r\n    const baseUrl=`https://www.udemy.com/api-2.0/courses/${id}`;\r\n    const coursesParams = `?fields[course]=title,headline,url,price,image_480x270`;\r\n    const url = baseUrl + coursesParams;\r\n\r\n    return fetch(url).then(async response =>{\r\n        return {code: await response.status, data:  response.json()};\r\n    }).then( result =>{\r\n        return result;\r\n    }).catch(err =>{\r\n        return err;\r\n    })\r\n\r\n}\r\n\r\nexport function deleteCourseApi(token,id){\r\n    const url = `${basePath}/${apiVersion}/delete-course/${id}`;\r\n\r\n    const params = {\r\n        method: \"DELETE\",\r\n        headers:{\r\n           \"Content-Type\": \"application/json\",\r\n           Authorization: token\r\n        }\r\n    };\r\n\r\n    return fetch(url,params).then(reponse =>{\r\n        return reponse.json();\r\n    }).then(result =>{\r\n        return result;\r\n    }).catch(err =>{\r\n        return err;\r\n    })\r\n}\r\n\r\nexport function addCourseApi (token,course){\r\n    const url = `${basePath}/${apiVersion}/add-course`;\r\n     const params = {\r\n         method:\"POST\",\r\n         headers:{\r\n             \"Content-Type\": \"application/json\",\r\n             Authorization: token\r\n         },\r\n         body: JSON.stringify(course)\r\n     }\r\n\r\n     return fetch(url,params).then(response =>{\r\n        return response.json();\r\n     }).then(result =>{\r\n         return result;\r\n     }).catch(err=>{\r\n         return err;\r\n     })\r\n}"]},"metadata":{},"sourceType":"module"}
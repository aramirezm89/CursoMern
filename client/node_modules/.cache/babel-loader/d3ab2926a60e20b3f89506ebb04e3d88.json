{"ast":null,"code":"import { basePath, apiVersion } from \"./config\";\nimport { ACCESS_TOKEN, REFRESH_TOKEN } from \"../utils/constants\";\nimport jwtDecode from \"jwt-decode\";\nexport function getAccessTokenApi() {\n  if (localStorage.getItem(ACCESS_TOKEN.value) === !undefined) {\n    logout();\n  } else {\n    const accessToken = localStorage.getItem(ACCESS_TOKEN);\n\n    if (!accessToken || accessToken === \"null\") {\n      return localStorage.removeItem(accessToken);\n    }\n\n    return willExpireToken(accessToken) ? null : accessToken;\n  }\n}\nexport function getRefreshTokenApi() {\n  const refreshToken = localStorage.getItem(REFRESH_TOKEN);\n\n  if (!refreshToken || refreshToken === \"null\") {\n    return null;\n  }\n\n  return willExpireToken(refreshToken) ? null : refreshToken;\n}\nexport function refreshAcessTokenApi(refreshToken) {\n  const url = `${basePath}/${apiVersion}/refresh-access-token`;\n  const bodyObject = {\n    refreshToken: refreshToken\n  };\n  const params = {\n    method: \"POST\",\n    body: JSON.stringify(bodyObject),\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  fetch(url, params).then(response => {\n    if (response.status !== 200) {\n      return null;\n    } else {\n      return response.json();\n    }\n  }).then(result => {\n    if (!result) {} else {\n      const {\n        accessToken,\n        refreshToken\n      } = result;\n      localStorage.setItem(ACCESS_TOKEN, accessToken);\n      localStorage.setItem(REFRESH_TOKEN, refreshToken);\n    }\n  });\n}\nexport function logout() {\n  localStorage.removeItem(ACCESS_TOKEN);\n  localStorage.removeItem(REFRESH_TOKEN);\n}\n\nfunction willExpireToken(token) {\n  const seconds = 60;\n  const metaToken = jwtDecode(token);\n  const {\n    exp\n  } = metaToken;\n  const now = (Date.now() + seconds) / 1000;\n\n  if (now > exp) {\n    logout();\n    return true;\n  } else {\n    return false;\n  }\n}","map":{"version":3,"sources":["C:/Users/Antonio/OneDrive/CursoMERN/ProyectoCurso/client/src/api/auth.js"],"names":["basePath","apiVersion","ACCESS_TOKEN","REFRESH_TOKEN","jwtDecode","getAccessTokenApi","localStorage","getItem","value","undefined","logout","accessToken","removeItem","willExpireToken","getRefreshTokenApi","refreshToken","refreshAcessTokenApi","url","bodyObject","params","method","body","JSON","stringify","headers","fetch","then","response","status","json","result","setItem","token","seconds","metaToken","exp","now","Date"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,UAAnB,QAAqC,UAArC;AACA,SAASC,YAAT,EAAuBC,aAAvB,QAA4C,oBAA5C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,OAAO,SAASC,iBAAT,GAA6B;AAElC,MAAGC,YAAY,CAACC,OAAb,CAAqBL,YAAY,CAACM,KAAlC,MAA6C,CAACC,SAAjD,EAA2D;AAEzDC,IAAAA,MAAM;AACP,GAHD,MAGK;AAEL,UAAMC,WAAW,GAAGL,YAAY,CAACC,OAAb,CAAqBL,YAArB,CAApB;;AAEA,QAAI,CAACS,WAAD,IAAgBA,WAAW,KAAK,MAApC,EAA4C;AAC1C,aAAOL,YAAY,CAACM,UAAb,CAAwBD,WAAxB,CAAP;AACD;;AACD,WAAOE,eAAe,CAACF,WAAD,CAAf,GAA+B,IAA/B,GAAqCA,WAA5C;AACC;AAGF;AAED,OAAO,SAASG,kBAAT,GAA8B;AACnC,QAAMC,YAAY,GAAGT,YAAY,CAACC,OAAb,CAAqBJ,aAArB,CAArB;;AACA,MAAI,CAACY,YAAD,IAAiBA,YAAY,KAAK,MAAtC,EAA8C;AAC5C,WAAO,IAAP;AACD;;AAED,SAAOF,eAAe,CAACE,YAAD,CAAf,GAAgC,IAAhC,GAAuCA,YAA9C;AACD;AAED,OAAO,SAASC,oBAAT,CAA8BD,YAA9B,EAA4C;AACjD,QAAME,GAAG,GAAI,GAAEjB,QAAS,IAAGC,UAAW,uBAAtC;AACA,QAAMiB,UAAU,GAAG;AACjBH,IAAAA,YAAY,EAAEA;AADG,GAAnB;AAIA,QAAMI,MAAM,GAAG;AACbC,IAAAA,MAAM,EAAE,MADK;AAEbC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeL,UAAf,CAFO;AAGbM,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT;AAHI,GAAf;AAQAC,EAAAA,KAAK,CAACR,GAAD,EAAME,MAAN,CAAL,CACGO,IADH,CACSC,QAAD,IAAc;AAClB,QAAIA,QAAQ,CAACC,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,aAAO,IAAP;AACD,KAFD,MAEO;AACL,aAAOD,QAAQ,CAACE,IAAT,EAAP;AACD;AACF,GAPH,EAQGH,IARH,CAQSI,MAAD,IAAY;AAChB,QAAI,CAACA,MAAL,EAAa,CAEZ,CAFD,MAEO;AACL,YAAM;AAAEnB,QAAAA,WAAF;AAAeI,QAAAA;AAAf,UAAgCe,MAAtC;AACAxB,MAAAA,YAAY,CAACyB,OAAb,CAAqB7B,YAArB,EAAmCS,WAAnC;AACAL,MAAAA,YAAY,CAACyB,OAAb,CAAqB5B,aAArB,EAAoCY,YAApC;AACD;AACF,GAhBH;AAiBD;AAED,OAAO,SAASL,MAAT,GAAkB;AACvBJ,EAAAA,YAAY,CAACM,UAAb,CAAwBV,YAAxB;AACAI,EAAAA,YAAY,CAACM,UAAb,CAAwBT,aAAxB;AACD;;AAED,SAASU,eAAT,CAAyBmB,KAAzB,EAAgC;AAC9B,QAAMC,OAAO,GAAG,EAAhB;AACA,QAAMC,SAAS,GAAG9B,SAAS,CAAC4B,KAAD,CAA3B;AACA,QAAM;AAAEG,IAAAA;AAAF,MAAUD,SAAhB;AACA,QAAME,GAAG,GAAG,CAACC,IAAI,CAACD,GAAL,KAAaH,OAAd,IAAyB,IAArC;;AACA,MAAIG,GAAG,GAAGD,GAAV,EAAe;AACbzB,IAAAA,MAAM;AACN,WAAO,IAAP;AACD,GAHD,MAGO;AACL,WAAO,KAAP;AACD;AACF","sourcesContent":["import { basePath, apiVersion } from \"./config\";\r\nimport { ACCESS_TOKEN, REFRESH_TOKEN } from \"../utils/constants\";\r\nimport jwtDecode from \"jwt-decode\";\r\n\r\nexport function getAccessTokenApi() {\r\n   \r\n  if(localStorage.getItem(ACCESS_TOKEN.value) === !undefined){\r\n  \r\n    logout();\r\n  }else{\r\n\r\n  const accessToken = localStorage.getItem(ACCESS_TOKEN);\r\n\r\n  if (!accessToken || accessToken === \"null\") {\r\n    return localStorage.removeItem(accessToken);\r\n  }\r\n  return willExpireToken(accessToken) ? null: accessToken;\r\n  }\r\n  \r\n  \r\n}\r\n\r\nexport function getRefreshTokenApi() {\r\n  const refreshToken = localStorage.getItem(REFRESH_TOKEN);\r\n  if (!refreshToken || refreshToken === \"null\") {\r\n    return null;\r\n  }\r\n\r\n  return willExpireToken(refreshToken) ? null : refreshToken;\r\n}\r\n\r\nexport function refreshAcessTokenApi(refreshToken) {\r\n  const url = `${basePath}/${apiVersion}/refresh-access-token`;\r\n  const bodyObject = {\r\n    refreshToken: refreshToken,\r\n  };\r\n\r\n  const params = {\r\n    method: \"POST\",\r\n    body: JSON.stringify(bodyObject),\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  };\r\n\r\n  fetch(url, params)\r\n    .then((response) => {\r\n      if (response.status !== 200) {\r\n        return null;\r\n      } else {\r\n        return response.json();\r\n      }\r\n    })\r\n    .then((result) => {\r\n      if (!result) {\r\n       \r\n      } else {\r\n        const { accessToken, refreshToken } = result;\r\n        localStorage.setItem(ACCESS_TOKEN, accessToken);\r\n        localStorage.setItem(REFRESH_TOKEN, refreshToken);\r\n      }\r\n    });\r\n}\r\n\r\nexport function logout() {\r\n  localStorage.removeItem(ACCESS_TOKEN);\r\n  localStorage.removeItem(REFRESH_TOKEN);\r\n}\r\n\r\nfunction willExpireToken(token) {\r\n  const seconds = 60;\r\n  const metaToken = jwtDecode(token);\r\n  const { exp } = metaToken;\r\n  const now = (Date.now() + seconds) / 1000;\r\n  if (now > exp) {\r\n    logout()\r\n    return true; \r\n  } else {\r\n    return false;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}
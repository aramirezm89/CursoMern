{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Antonio\\\\OneDrive\\\\CursoMERN\\\\ProyectoCurso\\\\client\\\\src\\\\components\\\\Admin\\\\MenuWeb\\\\MenuWebList\\\\MenuWebList.js\";\nimport React, { useState, useEffect } from 'react';\nimport { Switch, List, Button, Modal as ModalAntd, notification } from \"antd\";\nimport { EditOutlined, DeleteOutlined } from \"../../../../../node_modules/@ant-design/icons\";\nimport Modal from \"../../../../Modal\";\nimport DragSortableList from \"react-drag-sortable\";\nimport { updateMenuApi, activateMenuApi, deleteMenuApi } from \"../../../../api/menu\";\nimport { getAccessTokenApi } from \"../../../../api/auth\";\nimport AddMenuWebForm from '../AddMenuWebForm';\nimport EditMenuWebForm from \"..//EditMenuWebForm\";\nimport \"./MenuWebList.scss\";\nconst {\n  confirm\n} = ModalAntd;\nexport default function MenuWebList(props) {\n  const {\n    menu,\n    setReloadMenuWeb\n  } = props;\n  const [listItems, setListItems] = useState([]);\n  const [isVisibleModal, setIsVisibleModal] = useState(false);\n  const [modalTitle, setModalTitle] = useState(\"\");\n  const [modalContent, setModalContent] = useState(null);\n  useEffect(() => {\n    const listItemsArray = [];\n    menu.forEach(item => {\n      listItemsArray.push({\n        content: /*#__PURE__*/React.createElement(MenuItems, {\n          item: item,\n          activateMenu: activateMenu,\n          editMenuWebModal: editMenuWebModal,\n          deleteMenu: deleteMenu,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 29,\n            columnNumber: 7\n          }\n        })\n      });\n    });\n    setListItems(listItemsArray);\n  }, [menu]);\n\n  const activateMenu = (menu, status) => {\n    const accessToken = getAccessTokenApi();\n    activateMenuApi(accessToken, menu._id, status).then(response => {\n      notification[\"success\"]({\n        message: response\n      });\n    });\n  };\n\n  const onSort = (sortedList, dropEvent) => {\n    const accesToken = getAccessTokenApi();\n    sortedList.forEach(item => {\n      const {\n        _id\n      } = item.content.props.item;\n      const order = item.rank;\n      updateMenuApi(accesToken, _id, {\n        order\n      });\n    });\n  };\n\n  const addMenuWebModal = () => {\n    setIsVisibleModal(true);\n    setModalTitle(\"Creando nuevo Menú\");\n    setModalContent( /*#__PURE__*/React.createElement(AddMenuWebForm, {\n      setIsVisibleModal: setIsVisibleModal,\n      setReloadMenuWeb: setReloadMenuWeb,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 7\n      }\n    }));\n  };\n\n  const deleteMenu = menu => {\n    const accesToken = getAccessTokenApi();\n    confirm({\n      title: \"Eliminando menu\",\n      content: `¿Estas seguro que deseas eliminar el menu ${menu.title}`,\n      okText: \"Eliminar\",\n      okType: \"danger\",\n      cancelText: \"cancelar\",\n\n      onOk() {\n        deleteMenuApi(accesToken, menu._id).then(response => {\n          notification[\"success\"]({\n            message: response\n          });\n          setReloadMenuWeb(true);\n        }).catch(() => {\n          notification[\"error\"]({\n            message: \"Error del servidor.\"\n          });\n        });\n      }\n\n    });\n  };\n\n  const editMenuWebModal = menu => {\n    setIsVisibleModal(true);\n    setModalTitle(`Editando Menu: ${menu.title}`);\n    setModalContent( /*#__PURE__*/React.createElement(EditMenuWebForm, {\n      setIsVisibleModal: setIsVisibleModal,\n      setReloadMenuWeb: setReloadMenuWeb,\n      menu: menu,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 7\n      }\n    }));\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"menu-web-list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 6\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"menu-web-list_header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    type: \"primary\",\n    onClick: addMenuWebModal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }\n  }, \"Crear men\\xFA\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"menu-web-list_items\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(DragSortableList, {\n    items: listItems,\n    onSort: onSort,\n    type: \"vertical\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(Modal, {\n    title: modalTitle,\n    isVisible: isVisibleModal,\n    setIsVisible: setIsVisibleModal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }\n  }, modalContent));\n}\n\nfunction MenuItems(props) {\n  const {\n    item,\n    activateMenu,\n    editMenuWebModal,\n    deleteMenu\n  } = props;\n  return /*#__PURE__*/React.createElement(List.Item, {\n    actions: [/*#__PURE__*/React.createElement(Switch, {\n      defaultChecked: item.active,\n      onChange: e => activateMenu(item, e),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      type: \"primary\",\n      onClick: () => editMenuWebModal(item),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(EditOutlined, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(Button, {\n      type: \"danger\",\n      onClick: () => deleteMenu(item),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(DeleteOutlined, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 11\n      }\n    }))],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(List.Item.Meta, {\n    title: item.title,\n    description: item.url,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["C:/Users/Antonio/OneDrive/CursoMERN/ProyectoCurso/client/src/components/Admin/MenuWeb/MenuWebList/MenuWebList.js"],"names":["React","useState","useEffect","Switch","List","Button","Modal","ModalAntd","notification","EditOutlined","DeleteOutlined","DragSortableList","updateMenuApi","activateMenuApi","deleteMenuApi","getAccessTokenApi","AddMenuWebForm","EditMenuWebForm","confirm","MenuWebList","props","menu","setReloadMenuWeb","listItems","setListItems","isVisibleModal","setIsVisibleModal","modalTitle","setModalTitle","modalContent","setModalContent","listItemsArray","forEach","item","push","content","activateMenu","editMenuWebModal","deleteMenu","status","accessToken","_id","then","response","message","onSort","sortedList","dropEvent","accesToken","order","rank","addMenuWebModal","title","okText","okType","cancelText","onOk","catch","MenuItems","active","e","url"],"mappings":";AAAA,OAAOA,KAAP,IAAcC,QAAd,EAAuBC,SAAvB,QAAuC,OAAvC;AACA,SAAQC,MAAR,EAAeC,IAAf,EAAoBC,MAApB,EAA2BC,KAAK,IAAIC,SAApC,EAA8CC,YAA9C,QAAiE,MAAjE;AACA,SAAQC,YAAR,EAAqBC,cAArB,QAA0C,+CAA1C;AACA,OAAOJ,KAAP,MAAkB,mBAAlB;AACA,OAAQK,gBAAR,MAA8B,qBAA9B;AACA,SAAQC,aAAR,EAAsBC,eAAtB,EAAsCC,aAAtC,QAA0D,sBAA1D;AACA,SAAQC,iBAAR,QAAgC,sBAAhC;AACA,OAAOC,cAAP,MAA2B,mBAA3B;AACA,OAAOC,eAAP,MAA4B,qBAA5B;AAEA,OAAO,oBAAP;AAGA,MAAM;AAACC,EAAAA;AAAD,IAAYX,SAAlB;AACA,eAAe,SAASY,WAAT,CAAqBC,KAArB,EAA2B;AAC1C,QAAM;AAACC,IAAAA,IAAD;AAAOC,IAAAA;AAAP,MAA4BF,KAAlC;AACA,QAAM,CAACG,SAAD,EAAYC,YAAZ,IAA4BvB,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAACwB,cAAD,EAAiBC,iBAAjB,IAAuCzB,QAAQ,CAAC,KAAD,CAArD;AACA,QAAM,CAAC0B,UAAD,EAAaC,aAAb,IAA8B3B,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAAC4B,YAAD,EAAgBC,eAAhB,IAAmC7B,QAAQ,CAAC,IAAD,CAAjD;AAGAC,EAAAA,SAAS,CAAC,MAAI;AACV,UAAM6B,cAAc,GAAG,EAAvB;AAEAV,IAAAA,IAAI,CAACW,OAAL,CAAaC,IAAI,IAAG;AAClBF,MAAAA,cAAc,CAACG,IAAf,CAAoB;AACpBC,QAAAA,OAAO,eACP,oBAAC,SAAD;AAAW,UAAA,IAAI,EAAEF,IAAjB;AACU,UAAA,YAAY,EAAEG,YADxB;AAEU,UAAA,gBAAgB,EAAEC,gBAF5B;AAGU,UAAA,UAAU,EAAEC,UAHtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFoB,OAApB;AAQD,KATD;AAUAd,IAAAA,YAAY,CAACO,cAAD,CAAZ;AACD,GAdM,EAcL,CAACV,IAAD,CAdK,CAAT;;AAgBE,QAAMe,YAAY,GAAG,CAACf,IAAD,EAAMkB,MAAN,KAAgB;AACnC,UAAMC,WAAW,GAAGzB,iBAAiB,EAArC;AACAF,IAAAA,eAAe,CAAC2B,WAAD,EAAanB,IAAI,CAACoB,GAAlB,EAAsBF,MAAtB,CAAf,CAA6CG,IAA7C,CAAkDC,QAAQ,IAAE;AAC1DnC,MAAAA,YAAY,CAAC,SAAD,CAAZ,CAAwB;AACtBoC,QAAAA,OAAO,EAAED;AADa,OAAxB;AAGD,KAJD;AAKD,GAPD;;AASF,QAAME,MAAM,GAAG,CAACC,UAAD,EAAYC,SAAZ,KAAyB;AAEtC,UAAMC,UAAU,GAAGjC,iBAAiB,EAApC;AAEA+B,IAAAA,UAAU,CAACd,OAAX,CAAoBC,IAAI,IAAG;AACxB,YAAM;AAACQ,QAAAA;AAAD,UAAQR,IAAI,CAACE,OAAL,CAAaf,KAAb,CAAmBa,IAAjC;AACA,YAAMgB,KAAK,GAAGhB,IAAI,CAACiB,IAAnB;AACAtC,MAAAA,aAAa,CAACoC,UAAD,EAAYP,GAAZ,EAAgB;AAACQ,QAAAA;AAAD,OAAhB,CAAb;AACF,KAJD;AAKA,GATF;;AAWE,QAAOE,eAAe,GAAG,MAAK;AAC5BzB,IAAAA,iBAAiB,CAAC,IAAD,CAAjB;AACAE,IAAAA,aAAa,CAAC,oBAAD,CAAb;AACAE,IAAAA,eAAe,eACb,oBAAC,cAAD;AACE,MAAA,iBAAiB,EAAEJ,iBADrB;AAEE,MAAA,gBAAgB,EAAEJ,gBAFpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADa,CAAf;AAMD,GATD;;AAWA,QAAMgB,UAAU,GAAGjB,IAAI,IAAG;AAExB,UAAM2B,UAAU,GAAGjC,iBAAiB,EAApC;AAEAG,IAAAA,OAAO,CAAC;AACNkC,MAAAA,KAAK,EAAC,iBADA;AAENjB,MAAAA,OAAO,EAAE,6CAA4Cd,IAAI,CAAC+B,KAAM,EAF1D;AAGNC,MAAAA,MAAM,EAAC,UAHD;AAINC,MAAAA,MAAM,EAAC,QAJD;AAKNC,MAAAA,UAAU,EAAC,UALL;;AAMNC,MAAAA,IAAI,GAAE;AACJ1C,QAAAA,aAAa,CAACkC,UAAD,EAAY3B,IAAI,CAACoB,GAAjB,CAAb,CAAmCC,IAAnC,CAAwCC,QAAQ,IAAI;AAClDnC,UAAAA,YAAY,CAAC,SAAD,CAAZ,CAAwB;AACtBoC,YAAAA,OAAO,EAAED;AADa,WAAxB;AAGArB,UAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACD,SALD,EAKGmC,KALH,CAKS,MAAM;AACbjD,UAAAA,YAAY,CAAC,OAAD,CAAZ,CAAsB;AACpBoC,YAAAA,OAAO,EAAE;AADW,WAAtB;AAGD,SATD;AAUD;;AAjBK,KAAD,CAAP;AAmBD,GAvBD;;AAyBA,QAAMP,gBAAgB,GAAGhB,IAAI,IAAG;AAC9BK,IAAAA,iBAAiB,CAAC,IAAD,CAAjB;AACAE,IAAAA,aAAa,CAAE,kBAAiBP,IAAI,CAAC+B,KAAM,EAA9B,CAAb;AACAtB,IAAAA,eAAe,eACb,oBAAC,eAAD;AACE,MAAA,iBAAiB,EAAEJ,iBADrB;AAEE,MAAA,gBAAgB,EAAIJ,gBAFtB;AAGE,MAAA,IAAI,EAAID,IAHV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADa,CAAf;AAOD,GAVD;;AAYD,sBACI;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACG;AAAK,IAAA,SAAS,EAAC,sBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,SAAb;AAAuB,IAAA,OAAO,EAAE8B,eAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADJ,CADH,eAIG;AAAK,IAAA,SAAS,EAAC,qBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,gBAAD;AAAkB,IAAA,KAAK,EAAE5B,SAAzB;AAAoC,IAAA,MAAM,EAAEsB,MAA5C;AAAoD,IAAA,IAAI,EAAC,UAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CAJH,eAQG,oBAAC,KAAD;AACA,IAAA,KAAK,EAAElB,UADP;AAEA,IAAA,SAAS,EAAEF,cAFX;AAGA,IAAA,YAAY,EAAEC,iBAHd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKGG,YALH,CARH,CADJ;AAkBA;;AAMD,SAAS6B,SAAT,CAAmBtC,KAAnB,EAAyB;AACvB,QAAM;AAACa,IAAAA,IAAD;AAAOG,IAAAA,YAAP;AAAqBC,IAAAA,gBAArB;AAAsCC,IAAAA;AAAtC,MAAoDlB,KAA1D;AAEA,sBACE,oBAAC,IAAD,CAAM,IAAN;AACC,IAAA,OAAO,EAAE,cACR,oBAAC,MAAD;AAAQ,MAAA,cAAc,EAAEa,IAAI,CAAC0B,MAA7B;AACA,MAAA,QAAQ,EAAEC,CAAC,IAAIxB,YAAY,CAACH,IAAD,EAAM2B,CAAN,CAD3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADQ,eAKR,oBAAC,MAAD;AAAQ,MAAA,IAAI,EAAE,SAAd;AAAyB,MAAA,OAAO,EAAE,MAAMvB,gBAAgB,CAACJ,IAAD,CAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CALQ,eAQR,oBAAC,MAAD;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAsB,MAAA,OAAO,EAAE,MAAIK,UAAU,CAACL,IAAD,CAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CARQ,CADV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAcE,oBAAC,IAAD,CAAM,IAAN,CAAW,IAAX;AAAgB,IAAA,KAAK,EAAEA,IAAI,CAACmB,KAA5B;AAAmC,IAAA,WAAW,EAAEnB,IAAI,CAAC4B,GAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAdF,CADF;AAkBD","sourcesContent":["import React,{useState,useEffect} from 'react'\r\nimport {Switch,List,Button,Modal as ModalAntd,notification} from \"antd\";\r\nimport {EditOutlined,DeleteOutlined} from \"../../../../../node_modules/@ant-design/icons\";\r\nimport Modal from \"../../../../Modal\";\r\nimport  DragSortableList from \"react-drag-sortable\";\r\nimport {updateMenuApi,activateMenuApi,deleteMenuApi} from \"../../../../api/menu\"\r\nimport {getAccessTokenApi} from \"../../../../api/auth\"\r\nimport AddMenuWebForm from '../AddMenuWebForm';\r\nimport EditMenuWebForm from \"..//EditMenuWebForm\";\r\n\r\nimport \"./MenuWebList.scss\";\r\n\r\n\r\nconst {confirm} = ModalAntd;\r\nexport default function MenuWebList(props){\r\nconst {menu, setReloadMenuWeb} =  props;\r\nconst [listItems, setListItems] = useState([]);\r\nconst [isVisibleModal, setIsVisibleModal] =  useState(false);\r\nconst [modalTitle, setModalTitle] = useState(\"\");\r\nconst [modalContent , setModalContent] = useState(null);\r\n\r\n\r\nuseEffect(()=>{\r\n    const listItemsArray = [];\r\n\r\n    menu.forEach(item =>{\r\n      listItemsArray.push({\r\n      content:(\r\n      <MenuItems item={item} \r\n                activateMenu={activateMenu} \r\n                editMenuWebModal={editMenuWebModal} \r\n                deleteMenu={deleteMenu}\r\n      />\r\n        )})\r\n    });\r\n    setListItems(listItemsArray);\r\n  },[menu])\r\n\r\n  const activateMenu = (menu,status) =>{\r\n    const accessToken = getAccessTokenApi();\r\n    activateMenuApi(accessToken,menu._id,status).then(response=>{\r\n      notification[\"success\"]({\r\n        message: response\r\n      });\r\n    });\r\n  }\r\n\r\nconst onSort = (sortedList,dropEvent) =>{\r\n \r\n  const accesToken = getAccessTokenApi();\r\n\r\n  sortedList.forEach( item =>{\r\n     const {_id} = item.content.props.item;\r\n     const order = item.rank;\r\n     updateMenuApi(accesToken,_id,{order});\r\n  })\r\n }\r\n\r\n  const  addMenuWebModal = () =>{\r\n    setIsVisibleModal(true);\r\n    setModalTitle(\"Creando nuevo Menú\");\r\n    setModalContent(\r\n      <AddMenuWebForm\r\n        setIsVisibleModal={setIsVisibleModal}\r\n        setReloadMenuWeb={setReloadMenuWeb}\r\n      />\r\n    )\r\n  }\r\n\r\n  const deleteMenu = menu =>{\r\n   \r\n    const accesToken = getAccessTokenApi();\r\n\r\n    confirm({\r\n      title:\"Eliminando menu\",\r\n      content:`¿Estas seguro que deseas eliminar el menu ${menu.title}`,\r\n      okText:\"Eliminar\",\r\n      okType:\"danger\",\r\n      cancelText:\"cancelar\",\r\n      onOk(){\r\n        deleteMenuApi(accesToken,menu._id).then(response => {\r\n          notification[\"success\"]({\r\n            message: response\r\n          });\r\n          setReloadMenuWeb(true)\r\n        }).catch(() => {\r\n          notification[\"error\"]({\r\n            message: \"Error del servidor.\"\r\n          })\r\n        })\r\n      }\r\n    })\r\n  }\r\n\r\n  const editMenuWebModal = menu =>{\r\n    setIsVisibleModal(true);\r\n    setModalTitle(`Editando Menu: ${menu.title}`);\r\n    setModalContent(\r\n      <EditMenuWebForm\r\n        setIsVisibleModal={setIsVisibleModal}\r\n        setReloadMenuWeb = {setReloadMenuWeb}\r\n        menu = {menu}\r\n      />\r\n    )\r\n  }\r\n\r\n return(\r\n     <div className=\"menu-web-list\">\r\n        <div className=\"menu-web-list_header\">\r\n            <Button type=\"primary\" onClick={addMenuWebModal}>Crear menú</Button>\r\n        </div>\r\n        <div className=\"menu-web-list_items\">\r\n            <DragSortableList items={listItems} onSort={onSort} type=\"vertical\"/>\r\n        </div>\r\n\r\n        <Modal\r\n        title={modalTitle}\r\n        isVisible={isVisibleModal}\r\n        setIsVisible={setIsVisibleModal}\r\n        >\r\n          {modalContent}\r\n        </Modal>\r\n     </div>\r\n )\r\n}\r\n\r\n\r\n\r\n\r\n\r\nfunction MenuItems(props){\r\n  const {item, activateMenu, editMenuWebModal,deleteMenu} = props;\r\n\r\n  return(\r\n    <List.Item\r\n     actions={[\r\n      <Switch defaultChecked={item.active} \r\n      onChange={e => activateMenu(item,e)\r\n     \r\n      }/>,\r\n      <Button type={\"primary\"} onClick={() => editMenuWebModal(item)}>\r\n          <EditOutlined/>\r\n      </Button>,\r\n      <Button type=\"danger\" onClick={()=>deleteMenu(item)}>\r\n          <DeleteOutlined/>\r\n      </Button>\r\n     ]}>\r\n\r\n      <List.Item.Meta title={item.title} description={item.url} />\r\n    </List.Item>\r\n  )\r\n}"]},"metadata":{},"sourceType":"module"}